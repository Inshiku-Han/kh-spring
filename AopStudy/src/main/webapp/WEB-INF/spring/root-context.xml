<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
<!-- 		<bean class="com.spring.project.board.dao.BoardDAO" id="boardDAO"></bean> 		@Autowired 는 bean 하나만 -->
<!-- 		<bean class="com.spring.project.board.service.BoardServiceImpl" id="boardService"></bean> -->
		
		<context:component-scan base-package="com.spring.project"></context:component-scan>
		
<!-- 		<bean class="com.spring.project.common.LogAdvice" id="log"></bean> -->
<!-- 		<bean class="com.spring.project.common.BeforeAdvice" id="beforeLog"></bean> -->
		
		<!-- 조인포인트(joinpoint) : 호출되는 모든 메소드로서 (boardService에 정의된 메소드) -->
		<!-- 포인트컷(pointcut) : 조인포인트 중에서 실제로 aop가 적용되는 메소드 -->
		<!-- 어드바이스(advice) : 포인트컷에서 실행되는 기능 (LogAdvice.java)-->
		<!-- 애스팩트(aspect) : 포인트컷 + 어드바이스 -->
		
<!-- 		<aop:config> -->
<!-- 		execution(* : 모든 리턴형 -->
<!--  		클래스정의 : BoardService+ : BoardService의 파생클래스 ex)BoardServiceImpl -->
<!-- 		파생클래스 : 해당 클래스의 자식 클래스. 인터페이스라면 해당 인터페이스를 구현한 클래스 -->
<!-- 		메소드 : *(..) : 모든 메소드 -->
<!-- 		메소드 : get*(..) : get으로 시작하는 모든 메소드 -->
<!-- 		매개변수 : (..) : 매개변수의 개수와 타입에 제약이 없음 -->
<!-- 		매개변수 : (*) : 반드시 하나의 매개변수만 가짐. 단 타입은 제약이 없음 -->
<!-- 		매개변수 : (com.spring.project.board.vo.BoardVO) -->
<!-- 		매개변수 : (!com.spring.project.board.vo.BoardVO) -->
<!-- 		매개변수 : (String, *) 반드시 두개의 매개변수를 가지되, 첫번째는 String, 두번째는 아무거나 -->
<!-- 		매개변수 : (String, ..) 첫번째 매개변수가 String인 메소드 -->
		

<!-- 			<aop:pointcut expression="execution(* com.spring.project.board.service.*Impl.*(..))" id="allPointcut"/> 모든 메소드 -->
<!-- 			<aop:pointcut expression="execution(* com.spring.project.board.service.*Impl.insert*(..))" id="insertPointcut"/> 모든 메소드 -->
<!-- 			<aop:pointcut expression="execution(* com.spring.project.board.service.*Impl.select*(..))" id="selectPointcut"/> select로 시작하는 메소드만 -->
<!-- 			<aop:pointcut expression="execution(* com.spring.project.board.service.*Impl.*List(..))" id="listPointcut"/> List로 끝나는 메소드만 -->
			
<!-- 			<aop:aspect ref="beforeLog">bean의 id를 참조 -->
<!-- 				before : 메소드 실행전 -->
<!-- 				after : after returning 메소드 실행 후 성공적으로 리턴되면 동작 -->
<!-- 				after : after throwing 메소드 실행 중 오류가 났을 때 try catch 구문에서 catch에 해당 -->
<!-- 				after : after 메소드가 정상적으로 실행되거나, 오류가 발생했을 때 무조건 실행. finally구문에 해당 -->
<!-- 				around : 메소드 실행 전후에 동작 -->
<!-- 				<aop:before method="beforeLog" pointcut-ref="insertPointcut"/> -->
<!-- 				<aop:around method="arountLog" pointcut-ref="allPointcut"/> -->
<!-- 				<aop:around method="aroundLog" pointcut-ref="listPointcut"/> -->
<!-- 			</aop:aspect> -->
<!-- 		</aop:config> -->
		
		
		
<!-- 		@ 으로 aop를 처리하겠다 -->
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		
</beans>
